// Code generated by MockGen. DO NOT EDIT.
// Source: internal/book/repository.go
//
// Generated by this command:
//
//	mockgen -source=internal/book/repository.go -destination=internal/book/repository_mock.go -package=book
//

// Package book is a generated GoMock package.
package book

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockRepository) CreateBook(ctx context.Context, book *BookDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockRepositoryMockRecorder) CreateBook(ctx, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockRepository)(nil).CreateBook), ctx, book)
}

// DeleteBookById mocks base method.
func (m *MockRepository) DeleteBookById(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBookById", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBookById indicates an expected call of DeleteBookById.
func (mr *MockRepositoryMockRecorder) DeleteBookById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBookById", reflect.TypeOf((*MockRepository)(nil).DeleteBookById), ctx, id)
}

// GetBookById mocks base method.
func (m *MockRepository) GetBookById(ctx context.Context, id string) (*BookDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookById", ctx, id)
	ret0, _ := ret[0].(*BookDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookById indicates an expected call of GetBookById.
func (mr *MockRepositoryMockRecorder) GetBookById(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookById", reflect.TypeOf((*MockRepository)(nil).GetBookById), ctx, id)
}

// GetBooks mocks base method.
func (m *MockRepository) GetBooks(ctx context.Context, page, pageSize int, search string) (*[]BookDTO, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooks", ctx, page, pageSize, search)
	ret0, _ := ret[0].(*[]BookDTO)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBooks indicates an expected call of GetBooks.
func (mr *MockRepositoryMockRecorder) GetBooks(ctx, page, pageSize, search any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooks", reflect.TypeOf((*MockRepository)(nil).GetBooks), ctx, page, pageSize, search)
}

// UpdateBookById mocks base method.
func (m *MockRepository) UpdateBookById(ctx context.Context, id string, book *BookDTO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBookById", ctx, id, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBookById indicates an expected call of UpdateBookById.
func (mr *MockRepositoryMockRecorder) UpdateBookById(ctx, id, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBookById", reflect.TypeOf((*MockRepository)(nil).UpdateBookById), ctx, id, book)
}
